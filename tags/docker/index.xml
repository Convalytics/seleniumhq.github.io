<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Selenium</title><link>https://www.selenium.dev/tags/docker/</link><description>Recent content in Docker on Selenium</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 22 Aug 2024 15:24:21 +0200</lastBuildDate><atom:link href="https://www.selenium.dev/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi-Arch Images via Docker Selenium</title><link>https://www.selenium.dev/blog/2024/multi-arch-images-via-docker-selenium/</link><pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2024/multi-arch-images-via-docker-selenium/</guid><description>We&amp;rsquo;re very happy to announce the landing of Multi-Arch Images for Selenium Grid Server on the Selenium Docker Hub registry!
Motivation For experimental Docker container images that are able to run on platforms such as the Apple M-series or Raspberry Pi, the community-driven repository initiative hosted at SeleniumHQ-Community/docker-seleniarm. These images are built for separate architectures: linux/arm64 (aarch64), linux/arm/v7 (armhf), and linux/amd64 and published on Seleniarm Docker Hub registry.
In order to bring more awareness to the existence of the Multi-Arch Docker container images, provide more insight and transparency on how the container images are built, as well as overcome challenges in building and maintaining them.</description></item><item><title>Dev and Beta Channel Browsers via Docker Selenium</title><link>https://www.selenium.dev/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/dev-and-beta-channel-browsers-via-docker-selenium/</guid><description>The Docker Selenium browser Beta and Dev channel releases are now regularly published to Docker Hub and updated every two days. This enables testers and developers to test their applications on pre-release versions of Google Chrome, Mozilla Firefox, and Microsoft Edge before their official releases, using container tools, such as Docker. This empowers teams to stay ahead of the curve and catch potential showstoppers in their CI environment before those issues have an impact on their users.</description></item></channel></rss>